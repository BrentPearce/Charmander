%!PS-Adobe-3.0
%%Title: testappr.cpp
%%For: Unknown User
%%Creator: a2ps version 4.14
%%CreationDate: Sat Apr 21 16:39:37 2018
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 11.547912 def
/cw 6.928747 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   689.410325 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( ") p
(tridiagonal_matrix.h) str
(") p n
(#include) K
( ") p
(twopointbvp.h) str
(") p n
(#include) K
( ") p
(twopointbvpappr.h) str
(") p n
(#include) K
( <iostream>) p n
(#include) K
( <fstream>) p n
() N
(//-----------------------------------------------) c n
(// declare any needed constants) N
(//-----------------------------------------------) N
() p n
(double) k
( pi = acos\(-1.0\);) p n
() N
(double) k
( lambda = 2.0;) p n
() N
(//double theta = 2.3575510539e+00;) c n
() p n
(double) k
( theta = 8.5071995707e+00;) p n
() N
(//double phi = 0.0;) c n
() p n
(int) k
( numsub = 8;) p n
() N
(int) k
( ) p
(const) K
( maxIters = 1000;) p n
(double) k
( ) p
(const) K
( Toler = 1.0e-13;) p n
() N
(//--------------------------------------------------) c n
(//set the diffusion coeffcient and if present ) N
(// the reaction, forcing function and true solution) N
(//--------------------------------------------------) N
() p n
(double) k
( diffusioncoeff\(vector<) p
(double) k
(> &x\)) p n
({) N
() S 8 T () S
(return) K
( 1.0;) p n
(}) N
() N
(double) k
( forcecoeff\(vector <) p
(double) k
(> &x\)) p n
({) N
() S 8 T () S
(return) K
( 0;) p n
(}) N
() N
(double) k
( reactioncoeff\(vector<) p
(double) k
(> &par\)) p n
({) N
() S 8 T () S
(return) K
( -1.0*lambda*exp\(par[1]\);) p n
(}) N
() N
(double) k
( dudr\(vector<) p
(double) k
(> &par\)) p n
({) N
() S 8 T () S
(return) K
( -1.0*lambda*exp\(par[1]\);) p n
(}) N
() N
(double) k
( truesol\(vector<) p
(double) k
(> & x\)) p n
({) N
() S 8 T () S
(double) k
( numer = cosh\(theta*0.5*\(x[0] - 0.5\)\);) p n
() S 8 T () S
(double) k
( denom = cosh\(0.25*theta\);) p n
() S 8 T () S
(return) K
( -2*log\( numer/ denom \);) p n
(}) N
() N
(//double seed\(vector<double> & par\)) c n
(//{) N
(testappr.cpp) (Page 1/5) (Apr 21, 18 16:33) title
border
grestore
(Printed by Unknown User) rhead
() (1/5) (Saturday April 21, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//) c 8 T (return 4*phi*\(par[0] - 0\)*\(1 - par[0]\);) N
(//}) N
() p n
(int) k
( main\(\)) p n
({) N
() S 8 T () S
(//------------------------------------------------) c n
() p 8 T () S
(//set up the two point bvp) c n
() p 8 T () S
(//------------------------------------------------) c n
() p 8 T () S
(double) k
( * dom = new ) p
(double) k
([2];) p n
() S 8 T (dom[0] = 0.0;) N
() S 8 T (dom[1] = 1.0;) N
() N
() S 8 T (TwoPointBVP *prob = new TwoPointBVP\(dom, diffusioncoeff\);) N
() N
() S 8 T () S
(double) k
( *lbval = new ) p
(double) k
([2];) p n
() S 8 T (lbval[0] = 0.0; ) S
(//this is gamma_0) c n
() p 8 T (lbval[1] = 0.0; ) S
(// this is g_0) c n
() p 8 T (prob) S
(\256) sy
(set_left_bdry\(true , lbval\);) p n
() N
() S 8 T () S
(double) k
( *rbval = new ) p
(double) k
([2];) p n
() S 8 T (rbval[0] = 0.0; ) S
(//this is gamma_l) c n
() p 8 T (rbval[1] = 0.0;) S
(//this is g_l) c n
() p 8 T (prob) S
(\256) sy
(set_right_bdry\(true, rbval\);) p n
() N
() S 8 T (prob) S
(\256) sy
(set_reaction\(reactioncoeff,dudr\);) p n
() N
() S 8 T (prob) S
(\256) sy
(set_forcing_function\(forcecoeff\);) p n
() N
() S 8 T (prob) S
(\256) sy
(set_true_solution\(truesol\);) p n
() N
() N
() S 8 T () S
(//-----------------------------------------------------) c n
() p 8 T () S
(//display some info about the two point bvp) c n
() p 8 T () S
(//-----------------------------------------------------) c n
() p 8 T (prob) S
(\256) sy
(display_info_TwoPointBVP\(\);) p n
() N
() N
() S 8 T () S
(//-----------------------------------------------------) c n
() p 8 T () S
(//solve for the approximate solution) c n
() p 8 T () S
(//\(comment out this section if only finding error) c n
() p 8 T () S
(//higlight then ctrl + k, ctrl + c to comment out) c n
() p 8 T () S
(// highlight then ctrl+k, ctrl+u to uncomment\)) c n
() p 8 T () S
(//-----------------------------------------------------) c n
() p 8 T () N
() S 8 T ({) N
() S 8 T () S 16 T () S
(// create the 2 pt bvp approximation) c n
() p 8 T () S 16 T () S
(int) k
( numsubintervals = numsub;) p n
() S 8 T () S 16 T () S
(double) k
( * subintervals = new ) p
(double) k
([numsubintervals];) p n
() S 8 T () S 16 T () S
(for) K
( \() p
(int) k
( i = 0; i < numsubintervals; i++\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (subintervals[i] = \(dom[1] - dom[0]\) / numsubintervals;) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T (TwoPointBVPAppr *method = new TwoPointBVPAppr\(numsubintervals,) N
() S 8 T () S 16 T () S 24 T (subintervals, prob\);) N
() N
() S 8 T () S 16 T () S
(//method->set_intial_guess_seed\(seed\);) c n
() p n
() S 8 T () S 16 T (vector<) S
(double) k
(> sol = method) p
(\256) sy
(Solve\(maxIters,Toler\);) p n
(testappr.cpp) (Page 2/5) (Apr 21, 18 16:33) title
border
grestore
(Printed by Unknown User) rhead
() (Saturday April 21, 2018) (2/5) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (vector<) S
(double) k
(> xcoord = method) p
(\256) sy
(get_xcoord\(\);) p n
() N
() S 8 T () S 16 T (ofstream fileout;) N
() S 8 T () S 16 T (fileout.open\(") S
(approximatesol.txt) str
("\);) p n
() S 8 T () S 16 T () S
(for) K
( \() p
(int) k
( i = 0; i < numsubintervals + 1; i++\)) p n
() S 8 T () S 16 T () S 24 T (fileout << xcoord[i] << ") S
(\\t) str
(" << sol[i] << ") p
( ) str
(" << endl;) p n
() S 8 T () S 16 T (fileout.close\(\);) N
() N
() S 8 T () S 16 T () S
(if) K
( \(prob) p
(\256) sy
(true_solution_is_present\(\)\)) p n
() S 8 T () S 16 T ({) N
() S 8 T () S 16 T () S 24 T (fileout.open\(") S
(truesol.txt) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(int) k
( nres = 100;) p n
() S 8 T () S 16 T () S 24 T () S
(double) k
( s = \(dom[1] - dom[0]\) / nres;) p n
() S 8 T () S 16 T () S 24 T (vector<) S
(double) k
(> x\(1\);) p n
() S 8 T () S 16 T () S 24 T (x[0] = dom[0];) N
() S 8 T () S 16 T () S 24 T () S
(for) K
( \() p
(int) k
( i = 0; i < nres + 1; i++\)) p n
() S 8 T () S 16 T () S 24 T ({) N
() S 8 T () S 16 T () S 24 T () S 32 T (fileout << x[0] << ") S
(\\t) str
(" << prob) p
(\256) sy
(eval_true_soluti) p n
(on\(x\) << ") S
( ) str
(" << endl;) p n
() S 8 T () S 16 T () S 24 T () S 32 T (x[0] += s;) N
() S 8 T () S 16 T () S 24 T (}) N
() S 8 T () S 16 T () S 24 T (fileout.close\(\);) N
() S 8 T () S 16 T (}) N
() S 8 T (}) N
() S 8 T () N
() S 8 T () S
(//----------------------------------------) c n
() p 8 T () S
(//end of section that finds the approx solution) c n
() p 8 T () S
(//----------------------------------------) c n
() p n
() N
() N
() S 8 T () S
(//-----------------------------------------) c n
() p 8 T () S
(//find error between true and approximate soln) c n
() p 8 T () S
(//\(comment out if only finding approx soln) c n
() p 8 T () S
(// higlight then ctrl+k, ctrl+c to comment out) c n
() p 8 T () S
(// highlight then ctrl+k, ctrl+u to uncomment\)) c n
() p 8 T () S
(//-----------------------------------------) c n
() p 8 T ({) N
() N
() N
() S 8 T () S 16 T () S
(//{) c n
() p 8 T () S 16 T () S
(//) c 24 T (//create vectors to store hs and e\(x_j\)s and ln) N
() p 8 T () S 16 T () S
(//) c 24 T (vector<double> h\(10\);) N
() p 8 T () S 16 T () S
(//) c 24 T (vector<double> ln_h\(10\);) N
() p 8 T () S 16 T () S
(//) c 24 T (vector<double> ex_j\(10\);) N
() p 8 T () S 16 T () S
(//) c 24 T (vector<double> ln_ex_j\(10\);) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (// for loop to run with diffrent size hs) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (//counter to help update h & ex_j) N
() p 8 T () S 16 T () S
(//) c 24 T (vector<double> doubles\(10\);) N
() p 8 T () S 16 T () S
(//) c 24 T (//named doubles because each entry is a double of the pr) N
(evious) N
() p 8 T () S 16 T () S
(//) c 24 T (//and this vector is used to double the numsubintervals ) N
(each iteration) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (for \(int i = 0; i < 10; i++\)) N
() p 8 T () S 16 T () S
(//) c 24 T ({) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (doubles[i] = pow\(2.0, \(i + 1\)\);) N
(testappr.cpp) (Page 3/5) (Apr 21, 18 16:33) title
border
grestore
(Printed by Unknown User) rhead
() (3/5) (Saturday April 21, 2018) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(//) c 24 T (}) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (//for loop to run the appx over and over w/ diff h.) N
() p 8 T () S 16 T () S
(//) c 24 T (for \(int j = 0; j < 10; j++\)) N
() p 8 T () S 16 T () S
(//) c 24 T ({) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T () S 32 T (// create the 2 pt bvp approximation) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (double numsubintervals = doubles[j];) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (double * subintervals = new double[numsubinterva) N
(ls];) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (for \(int i = 0; i < numsubintervals; i++\)) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T ({) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T () S 40 T (subintervals[i] = \(dom[1] - dom[0]\) / nu) N
(msubintervals;) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (}) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (//create subintervals size vector) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (h[j] = \(dom[1] - dom[0]\) / numsubintervals;) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T () S 32 T (// create the approximation for the new stepinte) N
(rval size) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (TwoPointBVPAppr *method = new TwoPointBVPAppr\(nu) N
(msubintervals,) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T () S 40 T (subintervals, prob\);) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T () S 32 T (//method->set_intial_guess_seed\(seed\);) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T () S 32 T (//solve and   find the maximum error: e\(x_j\) ) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (//for the new step size h) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (ex_j[j] = method->find_max_error\(maxIters, Toler) N
(\);) N
() p 8 T () S 16 T () S
(//) c 24 T (}) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (//find the natural log of the subinterval lengths and er) N
(rors) N
() p 8 T () S 16 T () S
(//) c 24 T (//for plotting) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (for \(int i = 0; i < 10; i++\)) N
() p 8 T () S 16 T () S
(//) c 24 T ({) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (ln_h[i] = log\(h[i]\);) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (ln_ex_j[i] = log\(ex_j[i]\);) N
() p 8 T () S 16 T () S
(//) c 24 T (}) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (// output the subinterval lenght vs error to a file) N
() p 8 T () S 16 T () S
(//) c 24 T (ofstream fileout;) N
() p 8 T () S 16 T () S
(//) c 24 T (fileout.open\("subintervallenghtvserror.txt"\);) N
() p 8 T () S 16 T () S
(//) c 24 T (for \(int i = 0; i < 10; i++\)) N
() p 8 T () S 16 T () S
(//) c 24 T ({) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (fileout << h[i] << "\\t" << ex_j[i] << " " << end) N
(l;) N
() p 8 T () S 16 T () S
(//) c 24 T (}) N
() p 8 T () S 16 T () S
(//) c 24 T (fileout.close\(\);) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (// output the ln of subinterval lenght and ln of errors ) N
(to a file) N
() p 8 T () S 16 T () S
(//) c 24 T (fileout.open\("ln_subintervallenghtvsln_error.txt"\);) N
() p 8 T () S 16 T () S
(//) c 24 T (for \(int i = 0; i < 10; i++\)) N
() p 8 T () S 16 T () S
(//) c 24 T ({) N
() p 8 T () S 16 T () S
(//) c 24 T () S 32 T (fileout << ln_h[i] << "\\t" << ln_ex_j[i] << " " ) N
(<< endl;) N
(testappr.cpp) (Page 4/5) (Apr 21, 18 16:33) title
border
grestore
(Printed by Unknown User) rhead
() (Saturday April 21, 2018) (4/5) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.850123 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(//) c 24 T (}) N
() p 8 T () S 16 T () S
(//) c 24 T (fileout.close\(\);) N
() p n
() S 8 T () S 16 T () S
(//) c 24 T (//delete vars associated with the problem) N
() p 8 T () S 16 T () S
(//) c 24 T (delete[]rbval;) N
() p 8 T () S 16 T () S
(//) c 24 T (delete[]lbval;) N
() p 8 T () S 16 T () S
(//) c 24 T (delete prob;) N
() p 8 T () S 16 T () S
(//) c 24 T (delete[]dom;) N
() p 8 T () S 16 T () S
(//}) c n
() p n
() S 8 T (}) N
() S 8 T () S
(//------------------------------------------------------) c n
() p 8 T () S
(// end of section that finds l infinty norm) c n
() p 8 T () S
(//-------------------------------------------------------) c n
() p n
() S 8 T () S
(return) K
( 0;) p n
(}) N
(testappr.cpp) (Page 5/5) (Apr 21, 18 16:33) title
border
grestore
(Printed by Unknown User) rhead
() (5/5) (Saturday April 21, 2018) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
